---
import Layout from '../../layouts/Layout.astro';
import { fetchPosts } from '../../lib/api';
import matter from 'gray-matter';
import { marked } from 'marked';

const { slug } = Astro.params;

const { posts, hasError } = await fetchPosts();

if (hasError) {
  throw new Error('Error fetching posts data');
}

// Encontramos el post usando la ID
const postMeta = posts.find((p: { id: string }) => p.id === slug);

if (!postMeta) {
  throw new Error('Post not found');
}

// Fetch seguro del Markdown desde el bucket
let mdText = '';
try {
  const mdRes = await fetch(postMeta.url);
  if (!mdRes.ok) throw new Error(`Error fetching markdown content: ${mdRes.status}`);
  mdText = await mdRes.text();
} catch (err) {
  console.error(err);
  throw new Error('Error fetching Markdown content');
}

// Extraemos frontmatter y contenido
const { data: frontmatter, content } = matter(mdText);

// Convertimos Markdown a HTML
const htmlContent = marked(content);

// Props para Layout
const PAGE_PROPS = {
  title: frontmatter.title || 'Post',
  description: frontmatter.description || '',
  image: frontmatter.image || '',
};

export const prerender = false;
---

<Layout {...PAGE_PROPS}>
  <article class="max-w-3xl mx-auto px-4 py-8 prose dark:prose-invert">
    <h1>{frontmatter.title}</h1>
    {
      frontmatter.date && (
        <time datetime={frontmatter.date}>
          {new Date(frontmatter.date).toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}
        </time>
      )
    }
    <div set:html={htmlContent} class="mt-6" />
  </article>
</Layout>
